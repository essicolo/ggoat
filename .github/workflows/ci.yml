name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest pytest-cov pytest-xdist
        
    - name: Run basic import tests
      run: |
        python -c "import ggoat; print(f'ggoat version: {ggoat.__version__}')"
        python -c "from ggoat import ggplot, aes; print('‚úÖ Basic imports successful')"
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=ggoat --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Code quality checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -e .
        
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      run: |
        mypy src/ggoat --ignore-missing-imports
        
  security:
    name: Security scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .
        
    - name: Run safety check
      run: |
        safety check
        
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  compatibility:
    name: Test optional dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extras: [pandas, jupyter, letsplot, all]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install with ${{ matrix.extras }} extras
      run: |
        python -m pip install --upgrade pip
        pip install -e .[${{ matrix.extras }}]
        
    - name: Test imports with extras
      run: |
        python -c "
        from ggoat import ggplot, aes
        import ggoat
        print(f'‚úÖ ggoat {ggoat.__version__} with {\"${{ matrix.extras }}\"} extras')
        
        # Test basic functionality
        data = {'x': [1, 2, 3], 'y': [4, 5, 6]}
        plot = ggplot(data, aes(x='x', y='y')).geom_point()
        spec = plot.build()
        assert 'layers' in spec
        print('‚úÖ Basic functionality working')
        "

  pyodide-test:
    name: Test Pyodide compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Pyodide testing dependencies
      run: |
        npm install -g pyodide-build
        npm install pyodide
        
    - name: Test in Pyodide environment
      run: |
        node -e "
        const { loadPyodide } = require('pyodide');
        
        async function testGgoat() {
          let pyodide = await loadPyodide();
          
          // Install the package
          await pyodide.runPython(\`
            import sys
            sys.path.append('src')
          \`);
          
          // Test basic imports and functionality
          await pyodide.runPython(\`
            from ggoat import ggplot, aes
            
            data = {'x': [1, 2, 3], 'y': [4, 5, 6]}
            plot = ggplot(data, aes(x='x', y='y')).geom_point()
            spec = plot.build()
            
            assert 'layers' in spec
            print('‚úÖ ggoat works in Pyodide!')
          \`);
        }
        
        testGgoat().catch(console.error);
        "

  performance:
    name: Performance benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pytest-benchmark
        
    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        from ggoat import ggplot, aes
        
        # Benchmark plot creation
        start = time.time()
        data = {'x': list(range(1000)), 'y': list(range(1000)), 'group': ['A', 'B'] * 500}
        
        plot = (ggplot(data, aes(x='x', y='y', color='group'))
                .geom_point()
                .geom_line()
                .geom_smooth()
                .theme_minimal())
        
        spec = plot.build()
        end = time.time()
        
        print(f'‚úÖ Large plot (1000 points, 3 layers) built in {end-start:.3f}s')
        print(f'üìä Spec size: {len(str(spec))} characters')
        "

  # Create a status check that summarizes all jobs
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    if: always()
    needs: [test, lint, security, compatibility, pyodide-test]
    
    steps:
    - name: Check job results
      run: |
        echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Compatibility | ${{ needs.compatibility.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Pyodide | ${{ needs.pyodide-test.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.lint.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.compatibility.result }}" == "success" && 
              "${{ needs.pyodide-test.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed!"
          exit 0
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi